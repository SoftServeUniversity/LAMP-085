== Ruby 1.9.3 project on Heroku

Heroku’s newest stack, “Celadon Cedar,” supports Ruby 1.9.3 and Rails 3.2. As of 9 May 2012, Heroku officially supports Ruby 1.9.3 (see Multiple Ruby Version Support on Heroku).

First, update to the newest version of Rubygems-Bundler:

<tt>$ rvm gemset use global</tt>

<tt>$ gem update rubygems-bundler</tt>

<tt>$ gem list</tt>

Update to the newest version of Bundler:

<tt>$ rvm gemset use global</tt>

<tt>$ gem update bundler</tt>

<tt>$ gem list</tt>


Install Heroku Gem

<tt>$  gem install heroku</tt>

Use PostgreSQL gem in Gemfile for Heroku
If you’d like to use PostgreSQL both locally and on Heroku for production, edit your Gemfile and change this line:
gem 'mysql'
To this:
gem 'pg'
Install your gems with:

<tt>$ bundle install</tt>

Heroku doesn’t check files in the config/initializers folder before attempting to precompile assets. That’s fine if you precompile assets before deploying to Heroku. Or if you don’t use the initializer files to set constants that are used in the assets files. You can avoid these issues by adding this configuration parameter to the config/application.rb file:
# Heroku requires this to be false
config.assets.initialize_on_precompile=false

To precompile assets before deployment to Heroku:

<tt>$rake assets:precompile</tt>

Git Initialize

<tt>$ git init</tt>

Git Add

<tt>$ git add .</tt>

Commit to Git
Your application must be committed to a Git repository before you can use Heroku. See Git and Rails to learn how to set up Git for your application.

Store the modified application in the Git repository:

<tt>$ git commit -am "Configured for deployment to Heroku"</tt>

Heroku Account
To deploy an app to Heroku, you must have a Heroku account. Visit http://heroku.com/ to set up an account. Heroku will ask you for your email address; it’s advisable to use the same email address you use for your GitHub account (see the article Git and Rails).

Using a Client’s Account
You may want to deploy an app to an account that belongs to someone other than yourself (for example, your employer or a client). If you are using a client’s or employer’s Heroku account, you won’t be able to push your application to Heroku until you’ve added yourself as a collaborator. After you create an app on Heroku, log in to your client’s account on Heroku. Under “My Apps” you’ll see the name of the app you’ve created; click “General Info” and you’ll find a form where you can add yourself as a collaborator.

Deploying for Multiple Accounts
David Dollar’s heroku-accounts plugin will help if you must use multiple accounts on Heroku. With the heroku-accounts plugin, you can configure each application to deploy to the appropriate account.

To install the heroku-accounts plugin:

<tt>$ heroku plugins:install git://github.com/ddollar/heroku-accounts.git</tt>
To add an account locally (which you’ll call “work”):

<tt>$ heroku accounts:add work --auto</tt>

To list accounts that are set up locally:

<tt>$ heroku accounts</tt>

To set an account to use for a project:

# in project root

<tt>$heroku accounts:set work</tt>

Create Your Application on Heroku
Use the Heroku create command to create and name your new app.

<tt>$ heroku create myapp</tt>

Replace myapp with something unique. Heroku demands a unique name for every hosted application. If it is not unique, you’ll see an error, “name is already taken.”

As of June 20, 2012, Heroku’s default stack changed to Cedar. Before, you needed to specify $ heroku create myapp --stack cedar; that’s no longer necessary.

If you don’t specify your app name (myapp in the example above), Heroku will supply a placeholder name. You can easily change Heroku’s placeholder name to a name of your choice with the heroku apps:rename command (see Renaming Apps from the CLI).

Don’t worry too much about getting the “perfect name” for your Heroku app. The name of your Heroku app won’t matter if you plan to set up your Heroku app to use your own domain name. You’ll just use the name for access to the instance of your app running on the Heroku servers; later, you’ll set up DNS to point your domain name to the app running on Heroku.

Set Heroku Environment Variables
Your application may be obtaining usernames, passwords, or API keys for external services from the Unix shell environment. It’s a recommended practice to avoid recording sensitive information in your application code where it might be exposed publicly on a GitHub repo.

Push Your Application to Heroku
Push your application to Heroku:

<tt>$ git push heroku master</tt>

Database Migrations
You’ll need to run your database migrations:

<tt>$ heroku run rake db:migrate</tt>

Don’t forget to restart your application or you won’t see any changes:

<tt>$ heroku restart</tt>

Visit Your Site
Open your Heroku site in your default web browser:

<tt>$ heroku open</tt>

Your app will be running at http://my-app-name.herokuapp.com/.

== Ruby 1.9.3 on NGINX

Install the passenger gem:

<tt>$gem install passenger</tt>

Use this command to start the nginx installation:

<tt>$passenger-install-apache2-module</tt>

Configure your rails app to work with nginx/passenger
Open nginx.conf to configure nginx

<tt>$sudo nano /opt/nginx/conf/nginx.conf</tt>


You will then need to add a server block looking similar to this:
	server {
	listen 80;
	server_name localhost;
	root /rails_apps/myapplication/public;   # <--- be sure to point to 'public'!
	passenger_enabled on;
	}
	
Restart nginx once again

<tt>$ passenger start</tt>

Your site will be accesible via: http://0.0.0.0:3000



